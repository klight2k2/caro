import pygame
import button
import math
from pprint import pprint

pygame.init()
HUMAN = 'b'
AI = 'w'
pygame.display.set_caption("Tic Tac Toe")  # the caption\
WIDTH = 800
HEIGHT = 800
ximg = pygame.image.load("images/X.png")
oimg = pygame.image.load("images/O.png")
screen = pygame.display.set_mode((WIDTH, HEIGHT))  # screen setup
LINE_COLOR = (228, 231, 236)
clock = pygame.time.Clock()  # the Clock object for framerate
BACKGROUND = (254, 254, 254)
attackScore = [0,  10,100, 1000,10000, 100000, 98304]
defenseScore = [0,  10,100, 1000,10000, 100000, 98304]

RULE=5
class Board:
    def __init__(self, SIZE):
        self.SIZE = SIZE
        self.CEIL = 80
        self.board = self.make_empty_board(SIZE, SIZE)
        self.status = self.make_empty_board(SIZE, SIZE)
        self.curTurn = HUMAN
        self.historyMoves = []

    def make_empty_board(self, row, col):
        board = [[' '] * row for _ in range(col)]
        return board

    def possible_moves(self):
        '''
        khởi tạo danh sách tọa độ có thể có tại danh giới các nơi đã đánh phạm vi 3 đơn vị
        '''
        # mảng taken lưu giá trị của người chơi và của máy trên bàn cờ
        taken = []
        # mảng directions lưu hướng đi (8 hướng)
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (-1, 1), (1, -1)]
        # cord: lưu các vị trí không đi 
        cord = {}

        for i in range(len(self.board)):
            for j in range(len(self.board)):
                if self.board[i][j] != ' ':
                    taken.append((i, j))
        ''' duyệt trong hướng đi và mảng giá trị trên bàn cờ của người chơi và máy, kiểm tra nước không thể đi(trùng với 
        nước đã có trên bàn cờ)
        '''
        for direction in directions:
            dy, dx = direction
            for coord in taken:
                y, x = coord
                for length in [1, 2, 3 ,4]:
                    move = self.march(y, x, dy, dx, length)
                    if move not in taken and move not in cord:
                        cord[move] = False
        return cord
    def march(self, y, x, dy, dx, length):
        '''
        tìm vị trí xa nhất trong dy,dx trong khoảng length

        '''
        yf = y + length * dy
        xf = x + length * dx
        # chừng nào yf,xf không có trong board
        while not self.is_in( yf, xf):
            yf -= dy
            xf -= dx

        return yf, xf
    def is_in(self, y, x):
        return 0 <= y < len(self.board) and 0 <= x < len(self.board)
    def is_empty(self):
        return self.board == [[' '] * len(self.board)] * len(self.board)
    def get_position(self):  # to render the image at the clicked position update value of curTurn as in whose turn it is
        y,x = pygame.mouse.get_pos()
        x = math.floor(x / self.CEIL)
        y = math.floor(y / self.CEIL)
        # print(y,x)
        return (y, x)

    def draw_img(self, x, y,curnTurn):
        posx = x * self.CEIL
        posy = y * self.CEIL
        if (curnTurn == HUMAN):
            screen.blit(ximg, (posy,posx))
        else:
            screen.blit(oimg, ( posy,posx))
        pygame.display.update()

    def draw_grid(self):
        screen.fill(BACKGROUND)
        x = 0
        y = 0
        for l in range(self.SIZE):
            x += self.CEIL
            y += self.CEIL
            pygame.draw.line(screen, LINE_COLOR, (x, 0), (x, WIDTH), 6)
            pygame.draw.line(screen, LINE_COLOR, (0, y), (HEIGHT, y), 6)


    def is_win(self):
        black = self.score_of_col( 'b')
        white = self.score_of_col( 'w')

        self.sum_sumcol_values(black)
        self.sum_sumcol_values(white)

        if 5 in black and black[5] == 1:
            return 'Black won'
        elif 5 in white and white[5] == 1:
            return 'White won'

        if sum(black.values()) == black[-1] and sum(white.values()) == white[-1] or self.possible_moves(self.board) == []:
            return 'Draw'

        return 'Continue playing'
    def score_ready(self,scorecol):
        '''
        Khởi tạo hệ thống điểm

        '''
        sumcol = {0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, -1: {}}
        for key in scorecol:
            for score in scorecol[key]:
                if key in sumcol[score]:
                    sumcol[score][key] += 1
                else:
                    sumcol[score][key] = 1

        return sumcol
    def sum_sumcol_values(self,sumcol):
        '''
        hợp nhất điểm của mỗi hướng
        '''

        for key in sumcol:
            if key == 5:
                sumcol[5] = int(1 in sumcol[5].values())
            else:
                sumcol[key] = sum(sumcol[key].values())


    def score_of_list(self,lis, col):
        blank = lis.count(' ')
        filled = lis.count(col)

        if blank + filled < 5:
            return -1
        elif blank == 5:
            return 0
        else:
            return filled


    def row_to_list(self,y, x, dy, dx, yf, xf):
        '''
        trả về list của y,x từ yf,xf

        '''
        row = []
        while y != yf + dy or x != xf + dx:
            row.append(self.board[y][x])
            y += dy
            x += dx
        return row


    def score_of_row(self,cordi, dy, dx, cordf, col):
        '''
        trả về một list với mỗi phần tử đại diện cho số điểm của 5 khối

        '''
        colscores = []
        y, x = cordi
        yf, xf = cordf
        row = self.row_to_list( y, x, dy, dx, yf, xf)
        print("score", row)

        for start in range(len(row) - 4):
            score = self.score_of_list(row[start:start + 5], col)
            colscores.append(score)

        return colscores


    def score_of_col(self,col):
        '''
        tính toán điểm số mỗi hướng của column dùng cho is_win;
        '''

        f = len(self.board)
        # scores của 4 hướng đi
        scores = {(0, 1): [], (-1, 1): [], (1, 0): [], (1, 1): []}
        for start in range(len(self.board)):
            scores[(0, 1)].extend(self.score_of_row( (start, 0), 0, 1, (start, f - 1), col))
            scores[(1, 0)].extend(self.score_of_row( (0, start), 1, 0, (f - 1, start), col))
            scores[(1, 1)].extend(self.score_of_row( (start, 0), 1, 1, (f - 1, f - 1 - start), col))
            scores[(-1, 1)].extend(self.score_of_row( (start, 0), -1, 1, (0, start), col))

            if start + 1 < len(self.board):
                scores[(1, 1)].extend(self.score_of_row( (0, start + 1), 1, 1, (f - 2 - start, f - 1), col))
                scores[(-1, 1)].extend(self.score_of_row( (f - 1, start + 1), -1, 1, (start + 1, f - 1), col))

        return self.score_ready(scores)


    def score_of_col_one( self,col, y, x):
        '''
        trả lại điểm số của column trong y,x theo 4 hướng,
        key: điểm số khối đơn vị đó -> chỉ ktra 5 khối thay vì toàn bộ
        '''

        scores = {(0, 1): [], (-1, 1): [], (1, 0): [], (1, 1): []}

        scores[(0, 1)].extend(self.score_of_row( self.march( y, x, 0, -1, 4), 0, 1, self.march( y, x, 0, 1, 4), col))

        scores[(1, 0)].extend(self.score_of_row( self.march( y, x, -1, 0, 4), 1, 0, self.march( y, x, 1, 0, 4), col))

        scores[(1, 1)].extend(self.score_of_row( self.march( y, x, -1, -1, 4), 1, 1, self.march( y, x, 1, 1, 4), col))

        scores[(-1, 1)].extend(self.score_of_row( self.march( y, x, -1, 1, 4), 1, -1, self.march( y, x, 1, -1, 4), col))

        return self.score_ready(scores)



    def find_move(self,curTurn):
        scoreMax = -1000
        bestMove=(-1,-1)
        moves= self.possible_moves()
        for move in moves:
            i,j= move
            if (self.board[i][j] == ' '):
                scoreAttack =self.attack_score_vertical(i,j,curTurn)+self.attack_score_horizontal(i,j,curTurn)+self.attack_score_major(i,j,curTurn) + self.attack_score_minor(i,j,curTurn)
                scoreDefense =self.defense_score_vertical(i,j,curTurn)+self.defense_score_horizontal(i,j,curTurn)+self.defense_score_major(i,j,curTurn) + self.defense_score_minor(i,j,curTurn)
                tempScore=scoreAttack
                # print(i,j,scoreAttack,scoreDefense,self.defense_score_minor(i,j,curTurn))
                if(tempScore < scoreDefense): tempScore= scoreDefense
                self.status[i][j]=tempScore
                if(tempScore > scoreMax):
                    scoreMax=tempScore
                    bestMove=move
                    # print("best score",scoreMax,scoreDefense,self.defense_score_minor(i,j,curTurn))
        return bestMove,scoreMax
    def TF34score(self,score3, score4):
        '''
        trả lại trường hợp chắc chắn có thể thắng(4 ô liên tiếp)
        '''
        for key4 in score4:
            if score4[key4] >= 1:
                for key3 in score3:
                    if key3 != key4 and score3[key3] >= 2:
                        return True
        return False


    def stupid_score(self, col, anticol, y, x):
        '''
        cố gắng di chuyển y,x
        trả về điểm số tượng trưng lợi thế 
        '''

        M = 1000
        res, adv, dis = 0, 0, 0

        # tấn công
        self.board[y][x] = col
        # draw_stone(x,y,colors[col])
        sumcol = self.score_of_col_one( col, y, x)
        print(sumcol)
        a = self.winning_situation(sumcol)
        adv += a * M
        self.sum_sumcol_values(sumcol)
        # {0: 0, 1: 15, 2: 0, 3: 0, 4: 0, 5: 0, -1: 0}
        adv += sumcol[-1] + sumcol[1] + 4 * sumcol[2] + 8 * sumcol[3] + 16 * sumcol[4]

        # phòng thủ
        self.board[y][x] = anticol
        sumanticol = self.score_of_col_one(anticol, y, x)
        d = self.winning_situation(sumanticol)
        dis += d * (M - 100)
        self.sum_sumcol_values(sumanticol)
        dis += sumanticol[-1] + sumanticol[1] + 4 * sumanticol[2] + 8 * sumanticol[3] + 16 * sumanticol[4]

        res = adv + dis

        self.board[y][x] = ' '
        return res


    def winning_situation(self,sumcol):
        '''
        trả lại tình huống chiến thắng dạng như:
        {0: {}, 1: {(0, 1): 4, (-1, 1): 3, (1, 0): 4, (1, 1): 4}, 2: {}, 3: {}, 4: {}, 5: {}, -1: {}}
        1-5 lưu điểm có độ nguy hiểm từ thấp đến cao,
        -1 là rơi vào trạng thái tồi, cần phòng thủ
        '''

        if 1 in sumcol[5].values():
            return 5
        elif len(sumcol[4]) >= 2 or (len(sumcol[4]) >= 1 and max(sumcol[4].values()) >= 2):
            return 4
        elif self.TF34score(sumcol[3], sumcol[4]):
            return 4
        else:
            score3 = sorted(sumcol[3].values(), reverse=True)
            if len(score3) >= 2 and score3[0] >= score3[1] >= 2:
                return 3
        return 0


    def best_move(self, col):
        '''
        trả lại điểm số của mảng trong lợi thế của từng màu
        '''
        if col == 'w':
            anticol = 'b'
        else:
            anticol = 'w'

        movecol = (0, 0)
        maxscorecol = ''
        # kiểm tra nếu bàn cờ rỗng thì cho vị trí random nếu không thì đưa ra giá trị trên bàn cờ nên đi 
        if self.is_empty():
            movecol = (5,5)
        else:
            moves = self.possible_moves()
            print("possible moves",moves)
            for move in moves:
                y, x = move
                if maxscorecol == '':
                    scorecol = self.stupid_score( col, anticol, y, x)
                    maxscorecol = scorecol
                    print("move col 1",movecol,scorecol)
                    movecol = move
                else:
                    scorecol = self.stupid_score( col, anticol, y, x)
                    if scorecol > maxscorecol:
                        maxscorecol = scorecol
                        print("move col",movecol,scorecol)
                        movecol = move
        return movecol

    def play_chess(self,move,curTurn):
        print("play chess",move)
        y,x=move
        self.board[x][y]=curTurn
        pprint(self.board)
        self.draw_img(x,y,curTurn)

 
    def heuristic(self):
        ay, ax = self.best_move("w")
        move=(ay,ax)
        print("ai move",move)
        self.play_chess(move,AI)

  



board = Board(10)
board.draw_grid()
curTurn=HUMAN
run = True
global playing
playing = False
drawGridCkeck = False
while run:  # the game loop
    for event in pygame.event.get():
        if (event.type == pygame.MOUSEBUTTONDOWN):
            move=board.get_position()
            y,x=move
            if(not board.is_in(y,x)): continue
            
            
            board.play_chess(move,HUMAN)
            print("human")
            # pprint(board.board)
            bestMove =board.heuristic()
            pprint(board.board)

        if event.type == pygame.QUIT:
            pygame.quit()
            quit()

    pygame.display.update()
    clock.tick(30)  # refresh rate
